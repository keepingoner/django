跨站脚本跨站脚本 (XSS) 
XSS攻击允许用户注入客户端脚本到其他用户的浏览器里。
这通常是通过存储在数据库中的恶意脚本，它将检索并显示给其他用户
或者通过让用户点击一个链接，这将导致攻击者的 JavaScript 被用户的浏览器执行。
然而，XSS 攻击可以来自任何不受信任的源数据
如 Cookie 或 Web 服务，任何没有经过充分处理就包含在网页中的数据。

使用 Django 模板保护你免受多数 XSS 攻击。 然而，重要的是要了解它提供了什么保护及其局限性。
Django 模板会 编码特殊字符 ，这些字符在 HTML 中都是特别危险的。 虽然这可以防止大多数恶意输入的用户，
但它不能完全保证万无一失。 例如，它不会防护以下内容：
<style class=>...</style>
如果 var 设置为 'class1 onmouseover=javascript:func()', 这可能会导致在未经授权的 JavaScript 的执行，
取决于浏览器如何呈现不完整的 HTML。 （对属性值使用引号可以修复这种情况。
同样重要的是is_safe要特别小心的用在 
自定义模板标签，safe 模板标签，mark_safe ，还有 autoescape 被关闭的时候。
此外，如果您使用的是模板系统输出 HTML 以外的东西，可能会有完全不同的字符和单词需要编码。
你也应该在数据库中存储 HTML 的时候要非常小心，尤其是当 HTML 被检索然后展示出来。


跨站请求伪造 (CSRF)
CSRF 攻击允许恶意用户在另一个用户不知情或者未同意的情况下，以他的身份执行操作。

Django 对大多数类型的 CSRF 攻击有内置的保护，在适当情况下你可以开启并使用它 。
然而，对于任何解决技术，都有它的局限性。

例如，CSRF 模块可以在全局范围内或为特定视图被禁用 。 
您应该只在您知道在做什么的情况下操作。 还有其他 限制 如果你的网站有子域名并且在你的控制之外。
CSRF 防护 是通过检查每个 POST 请求的一个随机数（nonce）来工作。 
这确保了恶意用户不能简单“回放”你网站上面表单的POST，以及让另一个登录的用户无意中提交表单。
恶意用户必须知道这个随机数，它是用户特定的（存在cookie里）。
使用 HTTPS来部署的时候，CsrfViewMiddleware会检查HTTP referer协议头是否设置为同源的URL（包括子域和端口）。
因为HTTPS提供了附加的安全保护，转发不安全的连接请求时，必须确保链接使用 HTTPS，并使用HSTS支持的浏览器。
使用csrf_exempt装饰器来标记视图时，要非常小心，除非这是极其必要的。


SQL 注入保护()


SQl注入是一种攻击类型，恶意用户可以在系统数据库中执行任意SQL代码。这可能会导致记录删除或者数据泄露。

通过使用Django的查询集，产生的SQL会由底层数据库驱动正确地转义。
然而，Django也允许开发者编写原始查询或者执行自定义sql。
这些功能应该谨慎使用，并且你应该时刻小心正确转义任何用户可以控制的参数。
另外，你在使用extra()的时候应该谨慎行事。

